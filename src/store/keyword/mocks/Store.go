// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/phuwn/crawlie/src/model"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BulkInsert provides a mock function with given fields: tx, keywords
func (_m *Store) BulkInsert(tx *gorm.DB, keywords []*model.Keyword) error {
	ret := _m.Called(tx, keywords)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Keyword) error); ok {
		r0 = rf(tx, keywords)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: tx, name
func (_m *Store) Get(tx *gorm.DB, name string) (*model.Keyword, error) {
	ret := _m.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Keyword
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) (*model.Keyword, error)); ok {
		return rf(tx, name)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) *model.Keyword); ok {
		r0 = rf(tx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Keyword)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByUser provides a mock function with given fields: tx, userID, limit, offset, search
func (_m *Store) ListByUser(tx *gorm.DB, userID string, limit int, offset int, search *string) ([]*model.Keyword, int64, error) {
	ret := _m.Called(tx, userID, limit, offset, search)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*model.Keyword
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, int, int, *string) ([]*model.Keyword, int64, error)); ok {
		return rf(tx, userID, limit, offset, search)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, int, int, *string) []*model.Keyword); ok {
		r0 = rf(tx, userID, limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Keyword)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, int, int, *string) int64); ok {
		r1 = rf(tx, userID, limit, offset, search)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*gorm.DB, string, int, int, *string) error); ok {
		r2 = rf(tx, userID, limit, offset, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListUncrawled provides a mock function with given fields: tx, limit, offset
func (_m *Store) ListUncrawled(tx *gorm.DB, limit int, offset int) ([]*model.Keyword, error) {
	ret := _m.Called(tx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListUncrawled")
	}

	var r0 []*model.Keyword
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int, int) ([]*model.Keyword, error)); ok {
		return rf(tx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, int, int) []*model.Keyword); ok {
		r0 = rf(tx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Keyword)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, int, int) error); ok {
		r1 = rf(tx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, _a1
func (_m *Store) Save(tx *gorm.DB, _a1 *model.Keyword) error {
	ret := _m.Called(tx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Keyword) error); ok {
		r0 = rf(tx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
